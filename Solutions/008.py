# The four adjacent digits in the 1000-digit number that have the
# greatest product are 9 × 9 × 8 × 9 = 5832.
# 7316717653133062491922511967442657474235534919493496983520312774506326
# 2395783180169848018694788518438586156078911294949545950173795833195285
# 3208805511125406987471585238630507156932909632952274430435576689664895
# 0445244523161731856403098711121722383113622298934233803081353362766142
# 8280644448664523874930358907296290491560440772390713810515859307960866
# 7017242712188399879790879227492190169972088809377665727333001053367881
# 2202354218097512545405947522435258490771167055601360483958644670632441
# 5722155397536978179778461740649551492908625693219784686224828397224137
# 5657056057490261407972968652414535100474821663704844031998900088952434
# 5065854122758866688116427171479924442928230863465674813919123162824586
# 1786645835912456652947654568284891288314260769004224219022671055626321
# 1111093705442175069416589604080719840385096245544436298123098787992724
# 4284909188845801561660979191338754992005240636899125607176060588611646
# 7109405077541002256983155200055935729725716362695618826704282524836008
# 23257530420752963450
# Find the thirteen adjacent digits in the 1000-digit number that have
# the greatest product. What is the value of this product?
# (Link: https://projecteuler.net/problem=8.)

from math import prod

def greatest_product_of_adjacent_digits(stream, num):
    """Return the highest product of "num" adjacent integers in a
    sliceable "stream" (an iterable of integers; integers must be
    positive or 0).
    """
    init = 0
    higher_product = 0
    while init+num <= len(stream):
        current_product = prod([int(x) for x in stream[init : init+num]])
        if current_product > higher_product: higher_product = current_product
        init += 1
    return higher_product

if __name__ == "__main__":
    stream = ("731671765313306249192251196744265747423553491949349698352031277"
              "450632623957831801698480186947885184385861560789112949495459501"
              "737958331952853208805511125406987471585238630507156932909632952"
              "274430435576689664895044524452316173185640309871112172238311362"
              "229893423380308135336276614282806444486645238749303589072962904"
              "915604407723907138105158593079608667017242712188399879790879227"
              "492190169972088809377665727333001053367881220235421809751254540"
              "594752243525849077116705560136048395864467063244157221553975369"
              "781797784617406495514929086256932197846862248283972241375657056"
              "057490261407972968652414535100474821663704844031998900088952434"
              "506585412275886668811642717147992444292823086346567481391912316"
              "282458617866458359124566529476545682848912883142607690042242190"
              "226710556263211111093705442175069416589604080719840385096245544"
              "436298123098787992724428490918884580156166097919133875499200524"
              "063689912560717606058861164671094050775410022569831552000559357"
              "2972571636269561882670428252483600823257530420752963450")
    print(greatest_product_of_adjacent_digits(stream, 13))